;; Opracuj klasy i funkcje pozwalające na prowadzenie rejestru ocen studenta, na przestrzeni
;; kilku lat. Dane studenta: imię, nazwisko, album, id_przedmiot, semestr, ocena, termin.
;; Opracowane funkcje powinny pozwalać na wprowadzanie danych, wyszukiwanie danych
;; wszystkich atrybutach studenta.

(defclass student ()
    ((name :initarg :name :accessor name)
    (surname :initarg :surname :accessor surname)
    (album :initarg :album :accessor album)
    (id_przedmiot :initarg :id_przedmiot :accessor id_przedmiot)
    (semestr :initarg :semestr :accessor semestr)
    (ocena :initarg :ocena :accessor ocena)
    (termin :initarg :termin :accessor termin))
)

(defvar *students* '())

(defun add-student (name surname album id_przedmiot semestr ocena termin)
    (push (make-instance 'student :name name :surname surname :album album :id_przedmiot id_przedmiot :semestr semestr :ocena ocena :termin termin) *students*)
)

(defun insert-student ()
    (write-line "")
    (let ((name nil)
        (surname nil)
        (album nil)
        (id_przedmiot nil)
        (semestr nil)
        (ocena nil)
        (termin nil))
        (write-line "Name: ")
        (setq name (read))
        (write-line "Surname: ")
        (setq surname (read))
        (write-line "Album: ")
        (setq album (read))
        (write-line "Id przedmiot: ")
        (setq id_przedmiot (read))
        (write-line "Semestr: ")
        (setq semestr (read))
        (write-line "Ocena: ")
        (setq ocena (read))
        (write-line "Termin: ")
        (setq termin (read))
        (add-student name surname album id_przedmiot semestr ocena termin)
    )
)

(defun print-student (student)
    (format t "~A ~A, ~A, przedmiot ~A, semestr ~A, ocena ~A, termin ~A" (name student) (surname student) (album student) (id_przedmiot student) (semestr student) (ocena student) (termin student))
    (write-line "")
)

(defun print-students ()
    (dolist (student *students*)
        (print-student student)
    )
)

(defun find-student-by-name (name)
    (dolist (student *students*)
        (when (equal name (name student))
            (print-student student)
        )
    )
)

(defun find-student-by-surname (surname)
    (dolist (student *students*)
        (when (equal surname (surname student))
            (print-student student)
        )
    )
)

(defun find-student-by-album (album)
    (dolist (student *students*)
        (when (equal album (album student))
            (print-student student)
        )
    )
)

(defun find-student-by-id_przedmiot (id_przedmiot)
    (dolist (student *students*)
        (when (equal id_przedmiot (id_przedmiot student))
            (print-student student)
        )
    )
)

(defun find-student-by-semestr (semestr)
    (dolist (student *students*)
        (when (equal semestr (semestr student))
            (print-student student)
        )
    )
)

(defun find-student-by-ocena (ocena)
    (dolist (student *students*)
        (when (equal ocena (ocena student))
            (print-student student)
        )
    )
)

(defun find-student-by-termin (termin)
    (dolist (student *students*)
        (when (equal termin (termin student))
            (print-student student)
        )
    )
)

;; (insert-student)
(add-student "Jan" "Kowalski" "123456" "1" "1" "5" "2020-01-01")
(add-student "Stefan" "Nowak" "654321" "1" "1" "5" "2020-01-01")
(add-student "Andrzej" "Adamiak" "23451" "1" "1" "5" "2020-01-01")
(print-students)
(find-student-by-name "Stefan")
(find-student-by-surname "Kowalski")
(find-student-by-album "23451")